<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
    
    <!-- 1.定义一个jdbc数据源，创建一个驱动管理数据源的bean -->
    <bean id="jdbcDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
      <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
      <property name="username" value="root"/>
      <property name="password" value="root"/>
    </bean>
    
    <!-- 2.创建一个sql会话工厂bean，指定数据源 -->
    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="jdbcDataSource"/> 指定数据源
      <property name="configLocation" value="classpath:config/SqlMapConfig.xml"/> 指定配置文件
    </bean> -->
    
    <!-- 去掉SqlMapConfig.xml配置文件的集成方式 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="jdbcDataSource"/> <!-- 指定数据源 -->
      <!-- 类型别名包，默认引入com.chen.mybatis.po下的所有类 -->
      <property name="typeAliasesPackage" value="com.chen.mybatis.po"/>
      <!-- 指定sql映射xml文件的路径 -->
      <property name="mapperLocations" value="classpath:config/sqlmap/*.xml"/>
    </bean>
    
    <!-- 创建一个UserTypeDao -->
    <bean id="userTypeDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
      <!-- 指定映射文件 -->
      <property name="mapperInterface" value="com.chen.mybatis.mapinterface.UserTypeDAO"/>
      <!-- 指定sql会话工厂 -->
      <property name="sqlSessionFactory" ref="sqlSessionFactory"/>  
    </bean>
    
    
    <!-- 创建一个sqlSession对象 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    
    <!-- 创建一个使用sqlSession查询的bean -->
    <bean id="userTypeDaoImpl" class="com.chen.mybatis.mapinterface.UserTypeDAOImpl">
      <property name="sqlSession" ref="sqlSession"/>
    </bean>
    
    <context:component-scan base-package="com.chen.mybatis">
    </context:component-scan>
    
    <aop:aspectj-autoproxy proxy-target-class="true">
    </aop:aspectj-autoproxy>
</beans>

<!-- mapperLocations：它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值。

configLocation：用于指定Mybatis的配置文件位置。如果指定了该属性，那么会以该配置文件的内容作为配置信息构建对应的SqlSessionFactoryBuilder，但是后续属性指定的内容会覆盖该配置文件里面指定的对应内容。

typeAliasesPackage：它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。

typeAliases：数组类型，用来指定别名的。指定了这个属性后，Mybatis会把这个类型的短名称作为这个类型的别名，前提是该类上没有标注@Alias注解，否则将使用该注解对应的值作为此种类型的别名。 -->