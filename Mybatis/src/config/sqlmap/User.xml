<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 命名空间，对sql进行分类管理，用于隔离sql语句，后面会讲另一层非常重要的作用 -->

<!--通过select执行数据库查询 id:标识映射文件中的sql 将sql语句封装到mappedStatement对象中，所以id称为Statement的id 
	#{}：表示占位符 #{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，那么#{}中的参数名可以任意，可以是value或者其他名称 
	parameterType：表示指定输入参数的类型 resultType：表示指定sql输出结果的所映射的java对象类型 -->
<!-- 根据id获取用户信息 -->

<mapper namespace="test">

   <resultMap type="com.chen.mybatis.po.User" id="user">
     <id column="id" property="id"/>
     <result column="username" property="username"/>
     <result column="sex" property="sex"/>
     <result column="address" property="address"/>
     <result column="birthday" property="birthday"/>
   </resultMap>

	<select id="findUserById" parameterType="int"
		resultType="com.chen.mybatis.po.User">
		select * from user where id = #{id}
	</select>

	<!-- #{}有预编译效果，之后用?替换 ${}无预编译效果，之后用值直接接在sql语句后面 ，可使用在order by语句之后 -->
	<!-- #{ }表示一个占位符号，通过#{ }可以实现 preparedStatement 向占位符中设置值， 自动进行java 类型和 jdbc 
		类型转换，#{ } 可以有效防止sql注入。 #{ } 可以接收简单类型值或 pojo 属性值（通过 OGNL 读取对象中的值，属性.属性.属性..方式获取对象属性值）。 
		如果 parameterType 传输单个简单类型值，#{ }括号中可以是 value 或其它名称。 
		${ } 表示拼接 sql 串，通过${ }可以将 
		parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， ${ }可以接收简单类型值或 pojo 属性值（（通过 OGNL 
		读取对象中的值，属性.属性.属性..方式获取对象属性值））， 如果 parameterType 传输单个简单类型值，${}括号中只能是 value。 -->
	<select id="findUserByUsername" parameterType="String"
		resultType="com.chen.mybatis.po.User">
		select * from user where username like '%${value}'
	</select>

	<!-- selectKey将主键返回，需要再返回 添加selectKey实现将主键返回 
	keyProperty:返回的主键存储在pojo中的哪个属性 
		order：selectKey的执行顺序，是相对与insert语句来说，由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after 
		resultType:返回的主键是什么类型
		 LAST_INSERT_ID():是mysql的函数，返回auto_increment自增列新记录id值。 -->
	<insert id="insertUser" parameterType="com.chen.mybatis.po.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address) values (#{username},
		#{birthday}, #{sex}, #{address})
	</insert>

	<!--使用 MySQL 的 uuid()生成主键 执行过程： 
	首先通过uuid()得到主键，
	将主键设置到user对象的id属性中 其次执行insert时，
	从user对象中取出id属性值 -->
	<insert id="insertUserByUUID" parameterType="com.chen.mybatis.po.User">
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			select uuid()
		</selectKey>
		insert into user(id, username, birthday, sex, address) values(#{id},
		#{username}, #{birthday}, #{sex}, #{address})
	</insert>

    <update id="updateUserById" parameterType="com.chen.mybatis.po.User">
       update user set username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address} where id = #{id}
    </update>
</mapper>
